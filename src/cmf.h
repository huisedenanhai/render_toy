#pragma once
#include "defs.h"

// 2-deg XYZ CMFs transformed from the CIE (2006) 2-deg LMS cone fundamentals
// see http://cvrl.ioo.ucl.ac.uk/cmfs.htm
HOST_DEVICE_DATA size_t CMF_WaveLengthCount = 89;
HOST_DEVICE_DATA float CMF_MinWaveLength = 390.0f;
HOST_DEVICE_DATA float CMF_MaxWaveLength = 830.0f;
HOST_DEVICE_DATA float CMF_WaveLengthStride = 5.0f;

HOST_DEVICE_DATA float CMF_WaveLength[89] = {
    390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460,
    465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515, 520, 525, 530, 535,
    540, 545, 550, 555, 560, 565, 570, 575, 580, 585, 590, 595, 600, 605, 610,
    615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685,
    690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740, 745, 750, 755, 760,
    765, 770, 775, 780, 785, 790, 795, 800, 805, 810, 815, 820, 825, 830,
};

HOST_DEVICE_DATA float CMF_X[89] = {
    0.00376965,  0.00938297,  0.022143,    0.0474299,   0.089538,
    0.144621,    0.203573,    0.248852,    0.291825,    0.322709,
    0.348255,    0.341848,    0.322464,    0.282665,    0.248525,
    0.221978,    0.180691,    0.129192,    0.081829,    0.0460087,
    0.0208398,   0.00709773,  0.00246159,  0.00364918,  0.0155699,
    0.0431517,   0.0796292,   0.126847,    0.181803,    0.240502,
    0.309812,    0.380424,    0.449421,    0.528023,    0.613378,
    0.701677,    0.796775,    0.885338,    0.963839,    1.05101,
    1.10977,     1.14362,     1.15103,     1.13476,     1.08393,
    1.00734,     0.914288,    0.813556,    0.692472,    0.575541,
    0.473122,    0.384499,    0.299737,    0.227779,    0.170791,
    0.126381,    0.092246,    0.0663996,   0.0471061,   0.0329214,
    0.0226231,   0.0157542,   0.0109678,   0.00760875,  0.00521461,
    0.00356945,  0.00246482,  0.00170388,  0.00118624,  0.000826954,
    0.00057583,  0.00040583,  0.000285658, 0.000202185, 0.000143827,
    0.000102469, 7.34755e-05, 5.25987e-05, 3.80611e-05, 2.75822e-05,
    2.00412e-05, 1.45879e-05, 1.06814e-05, 7.85752e-06, 5.76828e-06,
    4.25917e-06, 3.16777e-06, 2.35872e-06, 1.76247e-06,
};

HOST_DEVICE_DATA float CMF_Y[89] = {
    0.000414616, 0.00105965,  0.00245219,  0.00497172,  0.00907986,
    0.0142938,   0.0202737,   0.0261211,   0.0331904,   0.0415794,
    0.0503366,   0.0574339,   0.0647235,   0.0723834,   0.0851482,
    0.106015,    0.129896,    0.153507,    0.178805,    0.206483,
    0.237916,    0.285068,    0.348354,    0.427759,    0.520497,
    0.620626,    0.718089,    0.794645,    0.85758,     0.907135,
    0.954467,    0.981411,    0.989023,    0.999461,    0.996774,
    0.990255,    0.973261,    0.942457,    0.896361,    0.85872,
    0.811587,    0.754479,    0.691855,    0.627007,    0.558375,
    0.489595,    0.42299,     0.360925,    0.298086,    0.24169,
    0.194312,    0.15474,     0.119312,    0.0897959,   0.0667104,
    0.048997,    0.0355998,   0.0255422,   0.0180794,   0.0126157,
    0.00866129,  0.00602768,  0.00419594,  0.00291086,  0.00199556,
    0.00136702,  0.000944727, 0.000653705, 0.000455597, 0.000317974,
    0.000221745, 0.000156557, 0.000110393, 7.82744e-05, 5.57886e-05,
    3.98188e-05, 2.86018e-05, 2.05126e-05, 1.48724e-05, 1.08e-05,
    7.86392e-06, 5.73694e-06, 4.2116e-06,  3.10656e-06, 2.28679e-06,
    1.69315e-06, 1.26256e-06, 9.42251e-07, 7.05386e-07,
};

HOST_DEVICE_DATA float CMF_Z[89] = {
    0.0184726,   0.0460978,   0.109609,    0.236925,    0.450837,
    0.737882,    1.05182,     1.30501,     1.55283,     1.74828,
    1.91748,     1.91844,     1.84854,     1.66444,     1.52216,
    1.42844,     1.25061,     0.999179,    0.755238,    0.561731,
    0.409931,    0.310594,    0.237675,    0.172002,    0.11768,
    0.0828355,   0.0565041,   0.0375191,   0.0243816,   0.0156617,
    0.00984647,  0.00613142,  0.00379029,  0.00232719,  0.00143213,
    0.000882253, 0.000545242, 0.000338674, 0.000211777, 0.000133503,
    8.49447e-05, 5.46071e-05, 3.54966e-05, 2.33474e-05, 1.55463e-05,
    1.04839e-05, 0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,           0,
    0,           0,           0,           0,
};

// see https://colorcalculations.wordpress.com/rgb-color-spaces/#RGBspaces
HOST_DEVICE_DATA float XYZ_To_sRGB_Matrix[3][3] = {
    {3.239886, -1.536869, -0.498444},
    {-0.967675, 1.872930, 0.041488},
    {0.056595, -0.207515, 1.075305}};

HOST_DEVICE_DATA float sRGB_To_XYZ_Matrix[3][3] = {
    {0.412529, 0.358164, 0.177404},
    {0.212710, 0.716328, 0.070961},
    {0.019337, 0.119388, 0.934326}};

__host__ __device__ inline float3 xyz_to_srgb(float3 xyz) {
  float x = xyz.x;
  float y = xyz.y;
  float z = xyz.z;
  auto m = XYZ_To_sRGB_Matrix;
  return make_float3(m[0][0] * x + m[0][1] * y + m[0][2] * z,
                     m[1][0] * x + m[1][1] * y + m[1][2] * z,
                     m[2][0] * x + m[2][1] * y + m[2][2] * z);
}

__host__ __device__ inline float3 srgb_to_xyz(float3 srgb) {
  float x = srgb.x;
  float y = srgb.y;
  float z = srgb.z;
  auto m = sRGB_To_XYZ_Matrix;
  return make_float3(m[0][0] * x + m[0][1] * y + m[0][2] * z,
                     m[1][0] * x + m[1][1] * y + m[1][2] * z,
                     m[2][0] * x + m[2][1] * y + m[2][2] * z);
}

HOST_DEVICE_DATA size_t CMF_InverseCDFCount = 100;
HOST_DEVICE_DATA float CMF_InverseCDF[100] = {
    0,        0.049228,  0.06085,   0.0691311, 0.0752347, 0.080993, 0.085921,
    0.090849, 0.0950049, 0.0991512, 0.103184,  0.106869,  0.110555, 0.114187,
    0.117549, 0.120911,  0.124273,  0.127633,  0.130992,  0.134352, 0.13776,
    0.141243, 0.144726,  0.14826,   0.152115,  0.155971,  0.159891, 0.164087,
    0.168282, 0.172592,  0.177025,  0.181458,  0.1864,    0.191388, 0.197071,
    0.203145, 0.210442,  0.218651,  0.228419,  0.240219,  0.253212, 0.266317,
    0.278721, 0.289818,  0.299643,  0.308546,  0.316665,  0.324133, 0.33129,
    0.337983, 0.344348,  0.350459,  0.356275,  0.361967,  0.367452, 0.372851,
    0.378063, 0.383153,  0.388147,  0.392979,  0.397806,  0.402405, 0.407005,
    0.411494, 0.415892,  0.420289,  0.424553,  0.428813,  0.43305,  0.437235,
    0.44142,  0.445543,  0.449619,  0.453696,  0.457754,  0.461806, 0.465858,
    0.469959, 0.474061,  0.47819,   0.482415,  0.48664,   0.490967, 0.495387,
    0.499806, 0.504533,  0.509274,  0.514273,  0.519474,  0.524908, 0.53073,
    0.536894, 0.543523,  0.551025,  0.559324,  0.569002,  0.580934, 0.596654,
    0.621311, 1,
};

HOST_DEVICE_DATA size_t CMF_PDFCount = 89;
HOST_DEVICE_DATA float CMF_MaxValidPDFIndex = 0.621311f;
HOST_DEVICE_DATA float CMF_PDF[89] = {
    0.0293928,   0.0733501,   0.174104,    0.375344,    0.71281,
    1.16342,     1.65493,     2.04972,     2.43613,     2.74064,
    3.00465,     3.00679,     2.90042,     2.61989,     2.40758,
    2.27863,     2.02535,     1.66298,     1.31789,     1.05629,
    0.86749,     0.781962,    0.763451,    0.782807,    0.848108,
    0.968584,    1.10819,     1.24413,     1.38002,     1.50915,
    1.65293,     1.77467,     1.87101,     1.98463,     2.09071,
    2.19609,     2.29698,     2.37164,     2.41352,     2.47767,
    2.49269,     2.46248,     2.39083,     2.28557,     2.13059,
    1.942,       1.73485,     1.52366,     1.28505,     1.0602,
    0.865866,    0.699556,    0.543634,    0.411991,    0.308112,
    0.227518,    0.165855,    0.119276,    0.0845653,   0.0590755,
    0.0405853,   0.0282577,   0.019672,    0.0136471,   0.00935377,
    0.00640411,  0.00442322,  0.0030585,   0.00212996,  0.00148532,
    0.0010347,   0.000729587, 0.000513798, 0.000363841, 0.000258962,
    0.00018459,  0.000132425, 9.48475e-05, 6.86709e-05, 4.97934e-05,
    3.62014e-05, 2.63675e-05, 1.93208e-05, 1.42237e-05, 1.04499e-05,
    7.72196e-06, 5.74747e-06, 4.28237e-06, 3.20155e-06,
};
